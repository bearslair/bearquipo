generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id              String            @id @default(uuid())
  email           String            @unique
  password        String
  firstName       String
  lastName        String
  tokens          Token[]
  addresses       UserAddress[]
  isActive        Boolean           @default(true)
  registerInfo    RegisterInfo?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ShoppingSession ShoppingSession[]
  Order           Order[]
}

model UserAddress {
  id           String  @id @default(uuid())
  userId       String
  addressLine1 String
  addressLine2 String?
  state        String
  city         String
  postalCode   String
  country      String
  phone        String
  user         User    @relation(fields: [userId], references: [id])
  Order        Order[]
}

model Token {
  id             String   @id @db.Char(36)
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  token          String   @unique
  type           Tokens
  expires        DateTime
  issuedAt       DateTime @default(now())
  isExpired      Boolean  @default(false)
  browser        String?
  browserVersion String?
  os             String?
  platform       String?
  userAgent      String?
}

enum Tokens {
  ACCESS
}

model RegisterInfo {
  id             String @id @default(uuid())
  userId         String @unique
  ip             String
  browser        String
  browserVersion String
  os             String
  platform       String
  userAgent      String
  user           User   @relation(fields: [userId], references: [id])
}

model Supplier {
  id      String    @id @default(uuid())
  name    String
  slug    String
  Product Product[]
}

model Product {
  id                 String           @id @default(uuid())
  name               String
  description        String
  slug               String           @unique
  sku                String           @unique
  price              Float
  supplierId         String
  productCategoryId  String
  productInventoryId String
  supplier           Supplier         @relation(fields: [supplierId], references: [id])
  category           ProductCategory  @relation(fields: [productCategoryId], references: [id])
  inventory          ProductInventory @relation(fields: [productInventoryId], references: [id])
  CartItem           CartItem[]
  OrderItem          OrderItem[]
}

model ProductCategory {
  id      String    @id @default(uuid())
  name    String    @unique
  Product Product[]
}

model ProductInventory {
  id       String    @id @default(uuid())
  quantity Int
  Product  Product[]
}

model ProductDiscount {
  id        String      @id @default(uuid())
  percent   Float
  isActive  Boolean     @default(false)
  OrderItem OrderItem[]
}

model ShoppingSession {
  id         String     @id @default(uuid())
  userId     String
  total      Float
  user       User       @relation(fields: [userId], references: [id])
  cart_items CartItem[]
}

model CartItem {
  id                String          @id @default(uuid())
  shoppingSessionId String
  productId         String
  quantity          Int
  product           Product         @relation(fields: [productId], references: [id])
  session           ShoppingSession @relation(fields: [shoppingSessionId], references: [id])
}

model Order {
  id            String      @id @default(uuid())
  userId        String
  total         Float
  deliveryFee   Float
  items         OrderItem[]
  userAddressId String
  createdAt     DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id])
  address       UserAddress @relation(fields: [userAddressId], references: [id])

}

model OrderItem {
  id                String           @id @default(uuid())
  productId         String
  quantity          Int
  price             Float
  productDiscountId String?
  finalPrice        Float
  orderId           String
  discount          ProductDiscount? @relation(fields: [productDiscountId], references: [id])
  product           Product          @relation(fields: [productId], references: [id])
  Order             Order            @relation(fields: [orderId], references: [id])
}
